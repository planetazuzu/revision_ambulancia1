name: 🚀 CI/CD Pipeline - AmbuReview Monorepo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 Detectar cambios en el monorepo
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      shared: ${{ steps.changes.outputs.shared }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'src/frontend/**'
              - 'package.json'
              - 'package-lock.json'
            backend:
              - 'src/backend/**'
              - 'package.json'
              - 'package-lock.json'
            shared:
              - 'src/shared/**'
            docker:
              - 'docker-compose*.yml'
              - 'Dockerfile*'
              - '.github/workflows/**'

  # 🧪 Tests y Linting
  test:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    strategy:
      matrix:
        workspace: [frontend, backend]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            src/${{ matrix.workspace }}/package-lock.json

      - name: 📥 Install dependencies
        run: |
          cd src/${{ matrix.workspace }}
          npm ci

      - name: 🧪 Run tests
        run: |
          cd src/${{ matrix.workspace }}
          npm run test --if-present

      - name: 🔍 Lint code
        run: |
          cd src/${{ matrix.workspace }}
          npm run lint --if-present

      - name: 🏗️ Build
        run: |
          cd src/${{ matrix.workspace }}
          npm run build

  # 🐳 Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [changes, test, build-docker]
    if: github.ref == 'refs/heads/main' && (needs.changes.outputs.docker == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true')
    environment: production
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🚀 Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /opt/ambureview
            git pull origin main
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker system prune -f

  # 📊 Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: 📢 Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Aquí puedes agregar notificaciones a Slack, Discord, etc.

      - name: 📢 Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Aquí puedes agregar notificaciones de error
