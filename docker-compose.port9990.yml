services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./ops/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  backend:
    build: 
      context: ./app/backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://app:app@db:5432/appdb?schema=public
      - REDIS_URL=redis://redis:6379
      - PORT=9990
    env_file:
      - env.port9990
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "9990:9990"
    volumes:
      - ./app/backend/uploads:/app/uploads
      - ./app/backend:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9990/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:9990
      - PORT=3001
    env_file:
      - env.port9990
    depends_on:
      - backend
    ports:
      - "3001:3000"
    volumes:
      - ./app/frontend:/app
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "8025:8025"
      - "1025:1025"
    restart: unless-stopped

volumes:
  db_data:
  redis_data:

networks:
  default:
    name: ambureview-network
